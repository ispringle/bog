:PROPERTIES:
:AUTHOR: Ian S. Pringle
:CREATED: <2020-03-05 Thu>
:MODIFIED: <2022-09-28 Wed 16:45>
:TYPE: literate
:header-args: elisp :exports code
:header-args: shell :tangle "setup.sh"
:header-args: :tangle no :results silent :eval no-export :noweb tangle
:END:
#+title: Doom Emacs Configuration
#+subtitle: Doom.
#+author: Ian S. Pringle
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
#+options: coverpage:yes
#+startup: fold

# :header-args: emacs-lisp :tangle ~/.config/doom/config.el :comments link
* General Settings
** Bootstrappin'

For some reason =lexical-binding= makes things faster. Let's initialize all our files with this at the top.

Here's =config.el='s
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; `$HOME/.config/doom/config.org`. You should make any changes there and
;; regenerate it from Emacs org-mode using org-babel-tangle (C-c C-v t)
#+end_src

Here's =init.el='s
#+begin_src emacs-lisp :tangle ~/.config/doom/init.el :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; `$HOME/.config/doom/config.org`. You should make any changes there and
;; regenerate it from Emacs org-mode using org-babel-tangle (C-c C-v t)
#+end_src

Here's =packages.el='s
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; `$HOME/.config/doom/config.org`. You should make any changes there and
;; regenerate it from Emacs org-mode using org-babel-tangle (C-c C-v t)
#+end_src

And this means we don't have to wait for Emacs to recompile our config on each save.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

** Personal Info
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq user-full-name "Ian S. Pringle"
      user-mail-address "ian@dapringles.com"
      auth-sources '("~/.authinfo"))

#+end_src

** A E S T H E T I C
*** Fonts

I keep going back and forth on this, but I rank the "main" fonts thusly:

Cozette> scientifica > Hack > Monoid

Cozette is easier on the eyes and has a lot of symbols supported. But it lacks a
variable pitch, so we use scientifica when we want bolds and italics.
Monoid/Monoisome gives me a headache... and Hack doesn't support ligatures, so
I'm going to use Hasklig for the unicode fallback.

We'll use a func to set the font, which means we can add some logic to determine
the appropriate font size based on the current monitor. We'll invoke this
function once at start-up and then we'll add it to the window-change hook so it
will get re-fired whenever Emacs moves windows.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun 0x44/set-font (font-size big-font-size)
  (setq doom-font (font-spec :family "CozetteVector" :size font-size)
        doom-big-font (font-spec :family "CozetteVector" :size big-font-size)
        doom-variable-pitch-font (font-spec :family "scientifica" :size font-size)
        doom-unicode-font (font-spec :family "Hasklug Nerd Font" :size font-size)
        doom-serif-font (font-spec :family "Didact Gothic" :size font-size)))

(defun 0x44/get-font-sizes-by-monitor-width (width-px)
    (cond ;; Must list from largest to smallest
     ((>= width-px 3840) '(24.0 30.0)) ;; LG 4k
     ((>= width-px 0) '(18.0 24.0)))) ;; Default Values

(defun 0x44/dyna-font (frame)
  (let* ((attrs (frame-monitor-attributes))
         (width-px (fourth (first attrs)))
         (font-sizes (0x44/get-font-sizes-by-monitor-width width-px))
         (font-size (car font-sizes))
         (big-font-size (car (last font-sizes))))
    (0x44/set-font font-size big-font-size)))

(let* ((font-sizes (0x44/get-font-sizes-by-monitor-width 3840))
         (font-size (car font-sizes))
         (big-font-size (car (last font-sizes))))
    (0x44/set-font font-size big-font-size))
(add-hook 'window-size-change-functions #'0x44/dyna-font)
#+end_src

*** Theme
I'm using MacOS currently and the emacs install I'm using is emacs-plus. This
emacs comes with a patch that automatically can toggle a ~load-theme~ when the
system preference color changes. So we're going to use that to set our theme.

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun 0x44/apply-theme (appearance)
  "Load theme, taking current system appearance into account"
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-earl-grey t))
    ('dark (load-theme 'doom-spacegrey t))))
(add-hook 'ns-system-appearance-change-functions #'0x44/apply-theme)
#+end_src
*** Dashboard
**** Splash Image
Set the splash image:

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq fancy-splash-image (expand-file-name "assets/blackhole-doodle.svg" doom-user-dir))
#+end_src

Add an ASCII fallback logo:

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn))
#+end_src

***** SVG
Because the splash image can be an SVG, we can actually /include/ the splash image in our literate config!
#+begin_src xml :tangle ~/.config/doom/assets/blackhole-doodle.svg
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
viewBox="0 0 446.204 446.204"
style="enable-background:new 0 0 446.204 446.204;"
xml:space="preserve">
<g>

<circle style="fill:#20505B;" cx="387.446" cy="360.897" r="17" />

<path style="fill:#20505B;"
d="M121.517,193.247l199.248,66.818c-18.45,55.02-78.006,84.661-133.037,66.208 C132.708,307.823,103.067,248.266,121.517,193.247z" />

<circle style="fill:#154047;" cx="222.159" cy="227.533"
r="74.443" />

<circle style="fill:#092A2D;" cx="222.159" cy="227.533"
r="40.761" />

<path style="fill:#20505B;"
d="M325.959,219.578L141.78,157.806c27.067-31.174,71.199-44.726,112.766-30.782 C296.124,140.972,323.173,178.385,325.959,219.578z" />

<path style="fill:#FCBC1D;"
d="M320.765,260.065l39.474,13.233c-25.766,76.816-108.925,118.204-185.744,92.449 S56.298,256.837,82.042,180.014l39.474,13.233c-18.45,55.02,11.192,114.576,66.212,133.026 C242.758,344.726,302.315,315.084,320.765,260.065z" />

<path style="fill:#EAC16E;"
d="M437.687,286.375c3.285,1.593,4.052,4.786,3.166,7.44c-0.976,2.921-3.965,5.194-7.786,3.906 l-72.828-24.422l-39.474-13.233l-199.248-66.818l-39.474-13.233l0.004-0.011L9.218,155.58c-7.28-2.431-4.382-13.335,3.148-11.837 c17.643,3.501,35.537,2.463,52.211-2.638c16.692-5.083,32.16-14.217,44.928-26.881c41.167-40.815,103.296-57.453,162.002-37.76 c58.71,19.682,98.252,70.413,106.485,127.801C383.092,239.862,405.31,270.704,437.687,286.375z M141.78,157.806l184.179,61.772 c-2.786-41.193-29.835-78.606-71.413-92.554C212.979,113.08,168.846,126.632,141.78,157.806z" />

<path style="fill:#333333;"
d="M221.133,394.221c-17.736,0-35.643-2.824-53.078-8.646l-0.202-0.068 c-19.625-6.579-37.615-16.571-53.455-29.692c-2.126-1.762-2.423-4.914-0.661-7.04c1.761-2.126,4.913-2.423,7.04-0.661 c14.889,12.333,31.802,21.726,50.269,27.917l0.163,0.055c59.916,20.009,125.794,2.368,167.845-44.939 c1.835-2.063,4.994-2.25,7.06-0.416c2.063,1.835,2.249,4.995,0.415,7.059C314.053,374.326,268.204,394.221,221.133,394.221z M99.357,339.27c-1.387,0-2.766-0.573-3.754-1.696c-32.037-36.38-46.851-84.661-40.643-132.461 c0.355-2.738,2.868-4.667,5.603-4.314c2.738,0.356,4.67,2.864,4.314,5.603c-5.837,44.944,8.097,90.346,38.23,124.565 c1.825,2.072,1.625,5.231-0.448,7.057C101.71,338.859,100.531,339.27,99.357,339.27z M356.782,321.263 c-0.946,0-1.903-0.269-2.752-0.83c-2.304-1.522-2.937-4.625-1.414-6.928c3.395-5.135,6.518-10.53,9.283-16.035 c1.24-2.467,4.246-3.463,6.712-2.223c2.468,1.239,3.463,4.245,2.224,6.712c-2.942,5.857-6.266,11.597-9.877,17.061 C359.996,320.474,358.405,321.263,356.782,321.263z M425.648,264.844c-1.135,0-2.276-0.384-3.214-1.172 c-18.309-15.385-30.279-37.03-33.707-60.949c-0.392-2.734,1.507-5.267,4.24-5.659c2.739-0.393,5.267,1.508,5.658,4.24 c3.078,21.481,13.818,40.911,30.242,54.711c2.114,1.776,2.388,4.931,0.611,7.045C428.49,264.238,427.074,264.844,425.648,264.844z M388.104,181.724c-2.151,0-4.139-1.4-4.788-3.567c-6.461-21.571-16.973-41.354-31.243-58.8 c-10.62-12.984-23.084-24.28-37.047-33.572c-2.299-1.53-2.922-4.634-1.392-6.933c1.529-2.298,4.63-2.923,6.933-1.393 c14.791,9.844,27.996,21.811,39.246,35.566c15.11,18.472,26.24,39.42,33.083,62.262c0.792,2.645-0.71,5.432-3.355,6.224 C389.062,181.656,388.579,181.724,388.104,181.724z M59.938,130.953c-2.143,0-4.125-1.389-4.781-3.545 c-0.804-2.642,0.685-5.436,3.327-6.24c6.772-2.062,13.32-4.971,19.46-8.645c2.371-1.418,5.44-0.646,6.858,1.723 s0.646,5.44-1.723,6.858c-6.838,4.092-14.133,7.332-21.682,9.63C60.911,130.882,60.42,130.953,59.938,130.953z M98.345,107.973 c-1.287,0-2.573-0.494-3.551-1.479c-1.944-1.961-1.931-5.127,0.03-7.071c23.237-23.038,52.349-39.3,84.188-47.027 c32.671-7.93,66.869-6.467,98.896,4.229l0.229,0.077c5.755,1.929,11.471,4.173,16.989,6.668c2.516,1.138,3.633,4.1,2.495,6.616 c-1.137,2.516-4.097,3.636-6.616,2.496c-5.212-2.356-10.611-4.476-16.049-6.299l-0.205-0.068 c-30.252-10.104-62.539-11.486-93.381-4c-30.069,7.298-57.562,22.655-79.505,44.411C100.89,107.49,99.617,107.973,98.345,107.973z" />

<path style="fill:#333333;"
d="M221.012,378.369c-15.955,0-32.167-2.537-48.107-7.881 C95.192,344.432,52.449,261.156,75.793,183.179L7.628,160.321c-5.737-1.917-8.777-7.558-7.224-13.413 c1.555-5.858,6.997-9.251,12.937-8.069c16.485,3.271,33.698,2.4,49.772-2.516c16.059-4.89,30.881-13.759,42.87-25.65 c21.187-21.005,47.731-35.833,76.765-42.879c29.848-7.244,61.09-5.886,90.348,3.93c29.26,9.809,55.005,27.561,74.451,51.335 c18.917,23.128,31.155,50.963,35.393,80.496c4.896,34.158,26.176,63.437,56.925,78.32c5.193,2.518,7.549,8.078,5.731,13.523 c-0.962,2.879-3.017,5.278-5.638,6.582c-2.58,1.284-5.594,1.454-8.489,0.478l-31.685-10.625c-2.618-0.878-4.028-3.712-3.15-6.331 c0.879-2.618,3.715-4.026,6.33-3.151l31.692,10.628c0.565,0.191,0.778,0.082,0.848,0.047c0.248-0.123,0.485-0.436,0.606-0.796 c0.305-0.915-0.243-1.181-0.606-1.356c-33.743-16.333-57.096-48.446-62.463-85.9c-3.979-27.729-15.471-53.865-33.234-75.583 c-18.252-22.313-42.419-38.976-69.89-48.186c-27.471-9.215-56.797-10.492-84.81-3.693c-27.264,6.617-52.19,20.54-72.083,40.262 c-13.139,13.032-29.389,22.754-46.992,28.114c-17.642,5.396-36.537,6.352-54.641,2.76c-0.395-0.079-1.048-0.208-1.322,0.826 c-0.273,1.029,0.356,1.239,0.732,1.364l72.833,24.424c2.566,0.861,3.981,3.607,3.193,6.197c-0.013,0.044-0.031,0.1-0.046,0.144 c-24.828,74.09,15.232,154.571,89.301,179.404c74.082,24.84,154.566-15.222,179.415-89.299c0.879-2.618,3.715-4.027,6.33-3.15 l12.159,4.078c2.618,0.878,4.028,3.712,3.15,6.331s-3.712,4.028-6.33,3.151l-7.496-2.514 C340.754,340.233,282.851,378.367,221.012,378.369z" />

<path style="fill:#333333;"
d="M221.249,336.783c-11.783,0-23.612-1.914-35.111-5.77c-27.876-9.348-50.443-28.991-63.543-55.312 c-13.1-26.32-15.167-56.167-5.819-84.044c0.878-2.618,3.713-4.028,6.331-3.151c2.618,0.878,4.029,3.712,3.151,6.331 c-17.543,52.317,10.746,109.152,63.061,126.695c25.348,8.5,52.487,6.622,76.418-5.287c23.931-11.91,41.789-32.426,50.288-57.77 c0.878-2.618,3.713-4.028,6.33-3.151c2.618,0.878,4.028,3.712,3.15,6.331c-9.348,27.876-28.991,50.443-55.313,63.543 C254.726,332.894,238.036,336.782,221.249,336.783z" />

<path style="fill:#333333;"
d="M325.959,224.578c-0.534,0-1.07-0.085-1.59-0.26L140.19,162.547 c-1.582-0.531-2.795-1.816-3.234-3.426c-0.438-1.61-0.045-3.333,1.049-4.593c29.358-33.813,75.729-46.47,118.131-32.245 c26.968,9.047,49.112,27.885,62.354,53.045c1.286,2.443,0.348,5.467-2.096,6.753c-2.443,1.286-5.468,0.348-6.754-2.096 c-12.038-22.872-32.169-39.997-56.685-48.222c-36.142-12.125-75.445-2.77-102.211,23.775l169.424,56.823 c-0.832-5.743-2.165-11.418-3.984-16.949c-0.862-2.623,0.564-5.449,3.188-6.312c2.622-0.865,5.449,0.564,6.313,3.187 c2.874,8.738,4.645,17.806,5.263,26.952c0.113,1.665-0.612,3.276-1.934,4.295C328.127,224.221,327.05,224.578,325.959,224.578z" />

<path style="fill:#333333;"
d="M360.24,278.299c-0.527,0-1.063-0.084-1.59-0.261l-89.628-30.052 c-2.618-0.878-4.028-3.712-3.15-6.331c0.879-2.618,3.715-4.027,6.33-3.151l89.626,30.052c2.618,0.878,4.029,3.712,3.151,6.33 C364.279,276.978,362.33,278.299,360.24,278.299z" />

<path style="fill:#333333;"
d="M247.581,240.523c-0.527,0-1.063-0.084-1.591-0.261L63.569,179.091 c-2.618-0.878-4.029-3.712-3.15-6.33c0.878-2.618,3.714-4.029,6.33-3.15l182.421,61.171c2.618,0.878,4.028,3.712,3.15,6.331 C251.618,239.203,249.671,240.523,247.581,240.523z" />

<g>

<path style="fill:#FCBC1D;"
d="M52.446,60.614c-2.761,0-5-2.239-5-5V34.181c0-2.761,2.239-5,5-5s5,2.239,5,5v21.434 C57.446,58.375,55.207,60.614,52.446,60.614z" />

<path style="fill:#FCBC1D;"
d="M63.163,49.897H41.729c-2.761,0-5-2.239-5-5s2.239-5,5-5h21.433c2.761,0,5,2.239,5,5 S65.924,49.897,63.163,49.897z" />
        </g>

<g>

<path style="fill:#FCBC1D;"
d="M321.446,417.023c-2.762,0-5-2.239-5-5V390.59c0-2.761,2.238-5,5-5s5,2.239,5,5v21.433 C326.446,414.785,324.208,417.023,321.446,417.023z" />

<path style="fill:#FCBC1D;"
d="M332.163,406.307h-21.434c-2.762,0-5-2.239-5-5s2.238-5,5-5h21.434c2.762,0,5,2.239,5,5 S334.925,406.307,332.163,406.307z" />
        </g>

<path style="fill:#FFFFFF;"
d="M378.395,263.993c-0.53,0-1.066-0.085-1.589-0.26l-40.64-13.629c-2.618-0.878-4.028-3.712-3.15-6.33 c0.879-2.618,3.714-4.029,6.33-3.15l28.051,9.407c-4.979-9.646-8.755-19.875-11.269-30.542c-0.633-2.688,1.033-5.38,3.721-6.013 c2.694-0.634,5.381,1.033,6.014,3.72c3.289,13.962,8.914,27.105,16.721,39.065c1.163,1.783,1.07,4.106-0.231,5.791 C381.387,263.298,379.914,263.993,378.395,263.993z" />

<path style="fill:#FFFFFF;"
d="M357.476,204.053c-2.331,0-4.417-1.638-4.896-4.011c-4.667-23.111-15.303-44.591-30.758-62.115 c-15.504-17.579-35.577-30.854-58.051-38.39l-0.153-0.051c-32.522-10.862-67.433-9.025-98.313,5.17 c-2.509,1.152-5.478,0.054-6.631-2.455s-0.054-5.478,2.455-6.631c33.197-15.26,70.717-17.238,105.651-5.571l0.159,0.053 c24.151,8.099,45.719,22.366,62.384,41.261c16.614,18.839,28.046,41.92,33.061,66.75c0.546,2.707-1.205,5.344-3.912,5.891 C358.137,204.02,357.803,204.053,357.476,204.053z" />

<path style="fill:#FFFFFF;"
d="M95.411,153.864c-1.75,0-3.449-0.92-4.366-2.556c-1.351-2.409-0.493-5.456,1.916-6.807 c9.717-5.448,18.678-12.21,26.635-20.097c7.122-7.061,14.965-13.388,23.311-18.803c2.318-1.502,5.414-0.844,6.916,1.473 c1.503,2.316,0.844,5.413-1.473,6.916c-7.772,5.043-15.078,10.937-21.714,17.517c-8.597,8.521-18.281,15.828-28.785,21.718 C97.079,153.658,96.239,153.864,95.411,153.864z" />

<path style="fill:#FFFFFF;"
d="M121.813,177.949c-0.527,0-1.063-0.084-1.59-0.261l-45.638-15.304 c-2.618-0.878-4.029-3.712-3.151-6.331c0.878-2.618,3.711-4.028,6.331-3.151l45.637,15.304c2.618,0.878,4.029,3.712,3.151,6.33 C125.853,176.628,123.903,177.949,121.813,177.949z" />

<path style="fill:#FFFFFF;"
d="M151.148,187.786c-0.527,0-1.063-0.084-1.59-0.261l-13.038-4.372 c-2.618-0.878-4.029-3.712-3.151-6.331c0.878-2.618,3.712-4.029,6.331-3.151l13.038,4.372c2.618,0.878,4.029,3.712,3.151,6.331 C155.187,186.466,153.238,187.786,151.148,187.786z" />

<path style="fill:#FFFFFF;"
d="M310.865,241.347c-0.527,0-1.063-0.084-1.591-0.261l-140.161-47.002 c-2.618-0.878-4.029-3.712-3.151-6.331c0.878-2.618,3.712-4.029,6.331-3.151l140.161,47.002c2.618,0.878,4.028,3.712,3.15,6.331 C314.903,240.026,312.955,241.347,310.865,241.347z" />

<path style="fill:#FFFFFF;"
d="M128.165,314.286c-1.382,0-2.757-0.569-3.745-1.685c-24.657-27.838-36.235-64.856-31.764-101.563 c0.334-2.741,2.829-4.69,5.568-4.359c2.741,0.334,4.693,2.827,4.359,5.568c-4.125,33.867,6.563,68.028,29.322,93.724 c1.831,2.067,1.64,5.228-0.427,7.058C130.527,313.872,129.342,314.286,128.165,314.286z" />

<path style="fill:#FFFFFF;"
d="M152.458,335.412c-0.948,0-1.907-0.269-2.756-0.832c-2.344-1.552-4.664-3.201-6.895-4.9 c-2.197-1.673-2.622-4.81-0.948-7.007c1.673-2.197,4.811-2.622,7.007-0.948c2.057,1.566,4.196,3.086,6.358,4.519 c2.302,1.524,2.933,4.627,1.408,6.929C155.67,334.625,154.079,335.412,152.458,335.412z" />

<path style="fill:#FFFFFF;"
d="M221.139,356.083c-13.715,0-27.542-2.188-40.987-6.679l-0.14-0.046 c-3.696-1.24-7.355-2.651-10.894-4.201c-2.529-1.108-3.682-4.057-2.574-6.586c1.109-2.529,4.058-3.68,6.586-2.574 c3.267,1.432,6.646,2.735,10.043,3.875l0.143,0.047c42.026,14.033,88.136,3.697,120.339-26.981 c2.002-1.905,5.165-1.829,7.069,0.171c1.905,2,1.828,5.164-0.171,7.069C285.963,343.604,253.88,356.083,221.139,356.083z" />

<path style="fill:#FFFFFF;"
d="M321.652,304.986c-1.023,0-2.057-0.313-2.946-0.964c-2.229-1.629-2.716-4.757-1.087-6.987 c2.818-3.856,5.428-7.923,7.757-12.09c1.346-2.41,4.39-3.273,6.804-1.925c2.41,1.347,3.272,4.394,1.925,6.804 c-2.525,4.519-5.355,8.931-8.411,13.112C324.714,304.275,323.193,304.986,321.652,304.986z" />

<path style="fill:#333333;"
d="M386.637,287.211c-0.33,0-0.65-0.03-0.98-0.09c-0.32-0.07-0.63-0.17-0.93-0.29 c-0.301-0.13-0.59-0.28-0.87-0.46c-0.271-0.18-0.521-0.39-0.76-0.62c-0.931-0.93-1.46-2.22-1.46-3.54c0-0.32,0.029-0.65,0.1-0.97 c0.06-0.32,0.16-0.64,0.28-0.94c0.13-0.3,0.279-0.59,0.46-0.86c0.18-0.28,0.39-0.53,0.62-0.76c0.239-0.23,0.489-0.44,0.76-0.62 c0.28-0.19,0.569-0.34,0.87-0.46c0.3-0.13,0.609-0.23,0.93-0.29c0.65-0.13,1.31-0.13,1.96,0c0.32,0.06,0.63,0.16,0.93,0.29 c0.301,0.12,0.591,0.27,0.87,0.46c0.271,0.18,0.53,0.39,0.76,0.62c0.23,0.23,0.44,0.48,0.62,0.76c0.181,0.27,0.33,0.56,0.46,0.86 c0.12,0.3,0.221,0.62,0.28,0.94c0.07,0.32,0.101,0.65,0.101,0.97c0,1.32-0.53,2.61-1.461,3.54 C389.236,286.681,387.946,287.211,386.637,287.211z" />

<path style="fill:#FFFFFF;"
d="M386.259,266.62c-0.525,0-1.06-0.083-1.585-0.259l-7.862-2.626 c-2.619-0.875-4.033-3.708-3.158-6.327c0.875-2.62,3.71-4.03,6.326-3.159l7.862,2.626c2.619,0.875,4.033,3.708,3.158,6.327 C390.301,265.296,388.351,266.62,386.259,266.62z" />

<path style="fill:#FFFFFF;"
d="M74.223,162.055c-0.525,0-1.059-0.083-1.584-0.259l-7.862-2.626 c-2.619-0.875-4.033-3.708-3.159-6.327c0.876-2.619,3.709-4.031,6.327-3.159l7.862,2.626c2.619,0.875,4.033,3.708,3.159,6.327 C78.265,160.731,76.315,162.055,74.223,162.055z" />

<path style="fill:#333333;"
d="M387.446,382.897c-12.131,0-22-9.869-22-22s9.869-22,22-22s22,9.869,22,22 S399.577,382.897,387.446,382.897z M387.446,348.897c-6.617,0-12,5.383-12,12s5.383,12,12,12s12-5.383,12-12 S394.063,348.897,387.446,348.897z" />
</g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
<g></g>
</svg>
#+end_src
***** De-clutter
De-clutter the dashboard:

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Misc.
*** Set line number style
Relative line numbers mean that the line you're on is displayed as it's line number within the buffer, but then all other lines (above and below the current line) are shown as how many lines away they are. This is very useful when operating in normal-mode.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq display-line-numbers-type 'relative)
#+end_src
*** Allow babel execution in CLI actions
The =$DOOMDIR/cli.el= file is sourced every time a CLI command is run, so we can just enable evaluation by setting ~org-confirm-babel-evaluate~ to ~nil~ there. While we're at it, we should silence ~org-babel-execute-src-block~ to avoid polluting the output.

#+begin_src emacs-lisp :tangle ~/.config/doom/cli.el :comments no
;;; cli.el -*- lexical-binding: t; -*-
(setq org-confirm-babel-evaluate nil)

(setq +literate-config-file "~/org/doom.org")

(defun doom-shut-up-a (orig-fn &rest args)
  (quiet! (apply orig-fn args)))

(advice-add 'org-babel-execute-src-block :around #'doom-shut-up-a)
#+end_src

*** Asynchronous config tangling
This rewrites Doom's org-mode hook to be async. If my literate config ever gets
too complicated, this might need to be reevaluated.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defadvice! +literate-tangle-async-h ()
  "A very simplified version of `+literate-tangle-h', but async."
  :override #'+literate-tangle-h
  (let ((default-directory doom-user-dir))
    (async-shell-command
     (format "emacs --batch --eval \"(progn \
(require 'org) (setq org-confirm-babel-evaluate nil) \
(org-babel-tangle-file \\\"%s\\\"))\""
             +literate-config-file))))
#+end_src

*** Preserve indentation when tangling
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq org-src-preserve-indentation t)
#+end_src
*** Key Mappings
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(map! :leader
      (:prefix "o"
       :desc "Open ielm" "I" #'ielm))
#+end_src
*** Auth Sources
To get the auth-sources stuff working on MacOS we have to:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(after! auth-source
  (setq auth-sources (nreverse auth-sources)))
#+end_src
* Doom's =init.el=
** init.el boilerplate

In Doomemacs =init.el= is where the Doom "config" lives. This is how you specify
what Doom modules to include. You're really not suppossed to do anything else in
=init.el= except configure the Doom specific settings inside of the =Doom!=
function, however, the docs also say you can add the =+literate-config-file=
location to the =init.el= file, so I'm just going to do that and assume it's all
going to be okay... This also has to go into the =cli.el= file.

#+name: literate-config-file-var
#+begin_src emacs-lisp :tangle ~/.config/doom/init.el :noweb no-export :comments no
(setq +literate-config-file "~/org/doom.org")
#+end_src

Now we can add our =Doom!= block. We're using noweb to build this, so that we can
define each module's settings in it's own area and then export it in the right
place later.
#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle ~/.config/doom/init.el :noweb no-export :comments no
(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

** Apps
#+name: doom-app
#+begin_src emacs-lisp :tangle no
#+end_src
** Completion
#+name: doom-completion
#+begin_src emacs-lisp :tangle no
(company +childframe)
(vertico +icons)
#+end_src

** Checkers
#+name: doom-checkers
#+begin_src emacs-lisp :tangle no
syntax
(:if (executable-find "aspell") spell)
grammar
#+end_src
** Config
#+name: doom-config
#+begin_src emacs-lisp :tangle no
literate
(default +bindings +smartparens)
#+end_src
** Editor
#+name: doom-editor
#+begin_src emacs-lisp :tangle no
(evil +everywhere)
;; file-templates
fold
(format +onsave)
snippets
;; word-wrap
#+end_src

** Emacs
#+name: doom-emacs
#+begin_src emacs-lisp :tangle no
(dired
 +icons
 ;; +ranger
)
electric
(ibuffer +icons)
undo
vc
#+end_src

** Email
#+name: doom-email
#+begin_src emacs-lisp :tangle no
#+end_src
** Languages
#+name: doom-lang
#+begin_src emacs-lisp :tangle no
data
emacs-lisp
(json +tree-sitter)
(javascript +lsp +tree-sitter)
(lua +fennel +moonscript +lsp)
markdown
(org
 +hugo
 ;; +dragndrop
 ;; +pretty
 ;; +roam2
)
(python +lsp +tree-sitter +pyright +poetry)
(racket +xp)
(rest +jq)
sh
(web +lsp +tree-sitter)
yaml
#+end_src
** OS
#+name: doom-os
#+begin_src emacs-lisp :tangle no
(:if IS-MAC macos)
(tty +osc)
#+end_src

** Term
#+name: doom-term
#+begin_src emacs-lisp :tangle no
;; eshell
vterm
#+end_src

** Tools
#+name: doom-tools
#+begin_src emacs-lisp :tangle no
(eval +overlay)
(lookup +dictionary +docsets +offline)
(lsp +peek)
(magit +forge)
make
tree-sitter
#+end_src
** UI

I had issues with =(ligatures +extra)=, most noteably the ligatures for =True= and
=False= did not display, however if you were in a mode that had the T/F ligatures
(Python, JavaScript) and you viewed the =prettify-symbols-alist= than you'd see
the correct unicode symbol, so I'm not sure what's up but I don't think it's a
limitation on the font.
#+name: doom-ui
#+begin_src emacs-lisp :tangle no
deft
doom
doom-dashboard
doom-quit
(emoji +ascii +github +unicode)
hl-todo
indent-guides
;; ligatures
modeline
;; nav-flash
ophints
(popup +all +defaults)
;; tabs
treemacs
(vc-gutter +diff-hl +pretty)
vi-tilde-fringe
(window-select +numbers +switch-window)
workspaces
#+end_src

* Orgmode
*** Settings
**** Boilerplate
Let's add auto save to org buffers.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;;(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

Now to fix some defaults:

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq org-use-property-inheritance t
      org-log-done 'time
      org-list-allow-alphabetical t
      org-export-in-background t
      org-fold-catch-invisible-edits 'smart
      org-auto-align-tags nil
      org-tags-column 0
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-ellipsis "…"
      org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-agenda-time-grid '((daily today require-timed)
                             (800 1000 1200 1400 1600 1800 2000)
                             " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string "⭠ now ─────────────────────────────────────────────────")
#+end_src
**** Auto Save and Sync

One minute before the start of the next hour, save all org buffers.

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
#+end_src

And then just used the baked in git sync feature:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(require 'org-attach-git)
#+end_src

**** Org Directories
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; Much of my org setup was stolen from http://doc.norang.ca/org-mode.html
(after! org-agenda
    (setq
     org-notes (concat (getenv "HOME") "/org")
     org-directory org-notes
     deft-directory org-notes
     ;; org-roam-directory (concat org-notes "/grok")
     org-roam-directory org-notes
     org-roam-dailies-directory org-notes
     org-blog-directory (concat org-notes "/blog")
     +org-capture-inbox (concat org-notes "/life.org")
     +org-capture-weekly (concat org-notes "/weekly.org")
     org-agenda-files (apply 'append
                             (mapcar
                              (lambda (directory)
                                (directory-files-recursively
                                 directory org-agenda-file-regexp))
                              (list org-notes )))))
#+end_src

**** Org Keywords

The idea here is the minimize states, which minimizes the time I have to think
about the state task should be in. Ultimately tasks either need to be started
(TODO), are finished (DONE), or cannot be worked on (HOLD). The idea of a "NEXT"
is better off-loaded to some algorithm that can determine the /next best/ task
to work on based on the effort required to finish it, the priority of the task,
and whether it's a blocker for another task. This is how Taskwarrior does it,
and think this is a great thing to embrace. The KILL state is here mostly
because it's a almost zero-effort call on whether or not a task is KILL'd (ie no
longer needs to be moved to a DONE state) and KILL'd, or cancelled, task is
different enough from a DONE task to merit it's own face..

Appointments (APPT) are like TODOs that are in HOLD until a specific time and at
the appointed time are immediately the /active/ task, until completed, when they
immediately are DONE. I mostly added this APPT state so that I can easily see
when I have appointments and because, like KILL, it requires next to no energy
to know if a task is an APPT -- and in fact this face would likely almost only
ever been created through a capture template anyway.

Finally we have the last three faces -- I don't want to use 'state' for them
because they're really not even tasks. MEET is for, wait for it, meetings -- but
also other similar types of events. The goal with MEET is to open the capture
template, keep it open for the duration of the MEET-thing and then close it. The
opening of the MEET-thing would log the start time and then the closing would
log the close. Why do I have NOTE and IDEA? No clue, I should probably just keep
one or the other, but I /feel/ like there is enough difference between the two
concepts to warrant both. An IDEA is something to /explore in detail later/,
like a blog post or a topic to look into. A NOTE is some knowledge or inkling I
want to /retain/ and perhaps develop later into a /grok/. Time will tell if I
keep both faces or condense them into one.

Lastly, I have some faces for my reading list. I was controlling this with a
file variable but it wasn't working right and it doesn't hurt anything to put
this in here.

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(after! org
  (setq org-todo-keywords
      '(
        (sequence "TODO(t)" "|" "DONE(d!/!)")
        (sequence "HOLD(h@/!)" "|" "KILL(k@/!)")
        (sequence "APPT(a)" "|" "DONE(d!)")
        (sequence "MEET(m)" "IDEA(i)" "NOTE(n)")
        (sequence "READ(r)" "READING(R)" "|" "DONE(d@/!)")))

  (setq org-todo-keyword-faces
        '(
          ;; I like the default TODO color...
          ;; ("TODO" :foreground "red" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("KILL" :foreground "forest green" :weight bold)
          ("MEET" :foreground "forest green" :weight bold)
          ("APPT" :foreground "magenta" :weight bold)
          ("IDEA" :foreground "gold" :weight bold)
          ("NOTE" :foreground "blue" :weight bold)
          ("READ" :foreground "red" :weight bold)
          ("READING" :foreground "magenta" :weight bold)))

  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-todo-state-tags-triggers
        '(("KILL" ("KILL" . t) ("ARCHIVE" . t))
          ("HOLD" ("HOLD" . t) ("ARCHIVE"))
          (done ("HOLD") ("ARCHIVE". t))
          ("TODO" ("HOLD") ("KILL") ("ARCHIVE"))
          ("DONE" ("HOLD") ("KILL") ("ARCHIVE" . t))
          ("READ" ("ARCHIVE"))
          ("READING" ("ARCHIVE")))))
#+end_src

**** Org tags
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(after! org
  (setq org-tag-alist '(
                        ;; Related to the computer, but not specific to work
                        ("BLOG" . ?b)
                        ("ORG" . ?o)
                        ;; Related to work
                        ("@work" . ?w)
                        ("INCIDENT" . ?i)
                        ("REQUEST" . ?r)
                        ;; Related to IRL
                        ("@home" . ?h)
                        ("@farm" . ?f)
                        ;; Related to traveling
                        ("ERRAND" . ?e)
                        ("@Doniphan" . ?D)
                        ("@PoplarBluff" . ?P)
                        ("@WestPlain" . ?W)
                        ("@Thayer" . ?T)
                        )))
#+end_src

**** Org Capture Templates

I'm trying to keep everything to just one file. Or, at least most of everything.
So we file everything into the "Inbox" heading, which is the /holding/ tank for
almost all my captures so I can later go through them and evaluate if they're
really valuable or not. Capturing is for the purpose of getting all my ideas,
tasks, etc. out of my head and somewhere less ephemeral as quickly as possible.
We can review the merit of the /things/ that are captures later during a reivew
period.

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline +org-capture-inbox "Inbox")
           "* TODO %? %(org-set-tags-command) \nCREATED: %U\n" :clock-in t :clock-resume t)
          ("T" "Task @ cursor" entry (file+headline +org-capture-inbox "Inbox")
           "* TODO %? %(org-set-tags-command) \nCREATED: %U\n%l\n" :clock-in t :clock-resume t)
          ("i" "Ideas" entry (file+headline +org-capture-inbox "Inbox")
           "* IDEA %?\nCREATED: %U\n" :clock-in t :clock-resume t)
          ("b" "Blog" entry (file+headline "blog.org" "New")
           (function 0x44/create-new-blog-buffer))
          ("n" "Notes" entry (file+headline +org-capture-inbox "Inbox")
           "* NOTE %?\nCREATED: %U\n%l\n" :clock-in t :clock-resume t)
          ("a" "Appointment" entry (file+headline +org-capture-inbox "Inbox")
           "* APPT %? %^gAPPOINTMENT: \nSCHEDULED: %^T\nCREATED: %U\n" :clock-in t :clock-resume t)
          ("m" "Meeting" entry (file+headline +org-capture-inbox "Meeting")
           "* MEET with %? :MEETING:\nCREATED: %U\n" :clock-in t :clock-resume t)
          ("w" "Weekly Plan" entry (file+olp+datetree +org-capture-weekly)
           "* Goals\n* Changes\n* PTO\n* Notes\n" :clock-in t :clock-resume t :tree-type week)
          ))
#+end_src

Because we are clocking all captures, we could easily end up with a 0:00 clock,
which we want to delete, but than that'd end up with an empty =:LOGBOOK:= and so
we should delete those since they're ugly and pointless.

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun 0x44/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at (point))))

(add-hook 'org-clock-out-hook '0x44/remove-empty-drawer-on-clock-out 'append)

#+end_src

**** Org Clocking
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;;
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)

;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)

;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))

;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)

;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)

;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))

;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
#+end_src

***** Clocking functions stolen from Norang

[[http://doc.norang.ca/org-mode.html#Clocking][Source]]

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(setq bh/keep-clock-running nil)

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "0a6abfc7-3d86-4a11-8ed4-85154df397f8")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))
#+end_src
****** Utility functions stolen fron Norang to help with the clocking functions stolen from Norang

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-task-p)
        nil)
       (t
        next-headline)))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))
#+end_src

***** Additional clock functions
This will toggle between a "break" task and the previously clocked task.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defvar 0x44/previous-clocked-task-id "")
(defvar 0x44/break-task-id "855c4e50-a1ff-4ef8-8615-cd593acdbf4a")

(defun 0x44/clock-in-break-task (_)
  "Clock in the break-task-id task"
  (interactive "p")
  (bh/clock-in-task-by-id 0x44/break-task-id))

(defun 0x44/toggle-clock-on-break-task (_)
  "Toggle the break-task-id task"
  (interactive "p")
  (bh/clock-in-task-by-id 0x44/break-task-id))
#+end_src
***** Keybindings for clock related functions
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(map! :map org-mode-map
      :after org
      :localleader
      (:prefix "c"
      :desc "Clock in previous task" "m" #'bh/clock-in-last-task
      :desc "Punch-In" "p" #'bh/punch-in
      :desc "Punch-Out" "P" #'bh/punch-out
      :desc "Clock in break" "b" #'0x44/clock-in-break-task))
#+end_src
*** Org Modules and Packages
**** org-modern
=org-modern= is a /better/ prettifier for orgmode.
#+begin_src emacs-lisp :tangle no
(package! org-modern)
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package! org-modern
  :hook (org-mode . global-org-modern-mode)
  :config
  (setq org-modern-label-border 0.3))
#+end_src
**** org-super-agenda
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; (package! org-super-agenda)
#+end_src
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (use-package! org-super-agenda
;;   :after org-agenda
;;   :config
;;   (setq org-super-agenda-groups '(
;;     (:name "Today" :date today)
;;     (:name "Inbox" :tag "INBOX")))
;;   (org-super-agenda-mode))
#+end_src
**** org-appear
Let's help org's =org-hide-emphasis-markers= work a little better. That hook will
make it so that org-appear only triggers in insert-mode:
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; (package! org-appear)
#+end_src
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (use-package! org-appear
;;   :hook (org-mode . (lambda ()
;;                       (org-appear-mode t)
;;                       (add-hook 'evil-insert-state-entry-hook
;;                                 #'org-appear-manual-start nil t)
;;                       (add-hook 'evil-insert-state-exit-hook
;;                                 #'org-appear-manual-stop nil t)))
;;   :config (setq org-appear-trigger 'manual
;;                 org-appear-autolinks t
;;                 org-appear-autosubmarkers t
;;                 org-appear-autoentities t
;;                 org-appear-autokeywords t
;;                 org-appear-inside-latex t))
#+end_src

**** org-ol-tree
This makes org headings nicer.
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; (package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree"))
#+end_src

#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (use-package! org-ol-tree
;;   :commands org-ol-tree
;;   :config
;;   (defadvice! org-ol-tree-system--graphical-frame-p--pgtk ()
;;     :override #'org-ol-tree-system--graphical-frame-p
;;     (memq window-system '(pgtk x w32 ns))))

;; (map! :map org-mode-map
;;       :after org
;;       :localleader
;;       :desc "Outline" "O" #'org-ol-tree)
#+end_src

**** org-chef
Capture recipes from urls!!!
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
(package! org-chef)
#+end_src
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(use-package! org-chef
  ;; :after org-capture
  :config
  (add-to-list 'org-capture-templates
               '("c" "Cookbook" entry (file+headline "~/org/recipes.org" "Inbox")
                 "%(org-chef-get-recipe-from-url)"
                 :empty-lines 1))
  (add-to-list 'org-capture-templates
               '("M" "Manual Cookbook" entry (file+headline "~/org/recipes.org" "Inbox")
                 "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))
#+end_src
***** TODO Setup a capture template or two for this
Something like this:
#+begin_src emacs-lisp :tangle no
#+end_src
**** org-roam
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (after! org-roam
;;   (setq org-roam-db-gc-threshold most-positive-fixnum
;;         org-link-to-org-use-id t)
;;   (set-popup-rules!
;;     `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
;;        :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 1)
;;       ("^\\*org-roam: " ; node dedicated org-roam buffer
;;        :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 2)))
;;   (add-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
;;   (setq org-roam-capture-templates
;;         '(("d" "default" plain "%?"
;;            :if-new (file+head "grok/${slug}.org"
;;                               ":PROPERTIES:\n:AUTHOR: %s\n:CREATED: %s\n:MODIFIED: %s\n:TYPE: blog\n:END:\n#+title: ${title}\n\n")
;;            :immediate-finish t
;;            :unnarrowed t)))
;;   (set-company-backend! 'org-mode '(company-capf))
;;   (require 'org-roam-protocol))
;; (use-package! org-roam-dailies
;;   :init
;;   (map! :leader
;;         :desc "org-roam-dailies-capture-today" "j" #'org-roam-dailies-capture-today)
;;   :config
;;   (setq org-roam-dailies-capture-templates
;;                 '(("d" "day" entry
;;                    "* %<%I:%M %p>:\n%?"
;;                    :target (file+datetree "journal.org" day)))))
;; (use-package! org-roam-protocol
;;   :after org-protocol)
#+end_src

**** org-roam-ui
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el :tangle no
;; (package! websocket)
;; (package! org-roam-ui :recipe
;;   (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link :tangle no
;; (use-package! websocket
;;   :after org-roam)
;; (use-package! org-roam-ui
;;   :after org-roam
;;   :commands org-roam-ui-mode
;;   :config
;;   (setq org-roam-ui-sync-theme t
;;         org-roam-ui-port 35900
;;         org-roam-ui-follow t
;;         org-roam-ui-update-on-save t
;;         org-roam-ui-open-on-start nil))
#+end_src

**** org-books
This package needs some love before I am willing to use it. Love might mean a
fork...
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
;; (package! org-books)
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package! org-books
  :after org-mode
  :config
  (require 'org-books)
  (setq org-books-file (concat org-notes + "books.org")))
#+end_src
*** Misc.
**** Quieter =sh-set-shell=
The function =sh-set-shell= can be very noisy. It's used for setting a buffer's
shell. To make it quiter we can inhibit the messages and then they'll show up in
our /Messages/ buffer but not in the buffer were it's called from (for example the
build.el file for my org-export):
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(advice-add 'sh-set-shell :around
            (lambda (orig-fun &rest args)
              (let ((inhibit-message t))
                (apply orig-fun args))))
#+end_src
**** org-export async fix
This is a fix for the async org-export not working. [[https://github.com/doomemacs/doomemacs/issues/6624#issuecomment-1238762533][GH Issue]]:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (defadvice! fixed-+org--fix-async-export-a (fn &rest args)
;;   :override #'+org--fix-async-export-a
;;   (let ((old-async-init-file org-export-async-init-file)
;;         (org-export-async-init-file (make-temp-file "doom-org-async-export")))
;;     (with-temp-file org-export-async-init-file
;;       (prin1 `(progn (setq org-export-async-debug
;;                            ,(or org-export-async-debug
;;                                 debug-on-error)
;;                            load-path ',load-path)
;;                      (unwind-protect
;;                          (load ,(or old-async-init-file early-init-file)
;;                                nil t)
;;                        (delete-file load-file-name)))
;;              (current-buffer)))
;;     (apply fn args)))
#+end_src
**** org-tangle-into-dir
This is a helper function to make tangling a little simpler. This function can
be called inside a block header with the =tangle= command and prepend a directory
(set in the doc's property drawer with =tangle-dir=) to the path given to the
function. Useful for literate configurations where you might wish to have every
document tangled into the same final directory. I got this from [[https://emacs.stackexchange.com/questions/46479/how-to-set-a-tangled-parent-directory-for-each-subtree-in-org-mode][here]].
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun 0x44/org-tangle-into-dir (sub-path)
  "Expand the SUB-PATH into the directory given by the tangle-dir
   property if that property exists, else use the
   `default-directory'."
  (expand-file-name sub-path
                    (or
                     (org-entry-get (point) "tangle-dir" 'inherit)
                     (default-directory))))
#+end_src
**** elfeed-org update
This is a function to update elfeed with new feeds in my elfeed-org file. I
found this [[https://blog.sidhartharya.com/automatically-fetching-newly-added-feeds-in-elfeed-org-file/][here]].
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
;; (require 'dash)
;; (defun 0x44/elfeed-org-update ()
;;   "Automatically update elfeed feeds from elfeed.org"
;;   (setq +elfeed-org-last (or (and (boundp 'elfeed-feeds) elfeed-feeds) nil))
;;   (elfeed)
;;   (setq +elfeed-org-current elfeed-feeds)
;;   (let ((elfeed-feeds (-difference +elfeed-org-current +elfeed-org-last)))
;;     ;; (message "&s" elfeed-feeds)
;;     (mapc #'elfeed-update-feed (elfeed--shuffle (elfeed-feed-list))))
;;   (setq elfeed-feeds +elfeed-org-current))
#+end_src
**** Blog Templates
This function will create a new blog post from a "template".
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(defun 0x44/create-new-blog-buffer ()
  "Created a new blog from the specified template in a new buffer"
  (interactive)
  (let* (($timestamp (format-time-string "<%Y-%m-%d %a %H:%M>" ))
         (title (read-from-minibuffer "Post Title: "))
         (fname (concat org-blog-directory "/" (org-hugo-slug title) ".org")))
    (let (($buf (generate-new-buffer title)))
      (switch-to-buffer $buf)
      (insert (format
               ":PROPERTIES:\n:AUTHOR: %s\n:CREATED: %s\n:MODIFIED: %s\n:TYPE: blog\n:END:\n#+title: %s\n#+filetags:\n"
               user-full-name $timestamp $timestamp title))
        (funcall 'org-mode)
        (funcall 'org-id-new)
        (setq buffer-offer-save t)
        (set-visited-file-name fname)
  $buf)))
#+end_src

* Languages
These are language specific settings for the various languages, including language specific LSP settings.
** Lua
To use EmmyLua as the ls for Lua we need to setup a few things because lsp-mode does not support installing EmmyLua:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el
;; (add-to-list 'company-lsp-filter-candidates '(lsp-emmy-lua . t))
#+end_src
** Typescript/Javascript
The following are ts-ls plugins to extend the capabilities of the ts-ls language server:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el
(setq lsp-clients-typescript-log-verbosity "debug"
      lsp-clients-typescript-plugins
        (vector
          ;; (list :name ""
          ;;       :location "")
          (list :name "ts-lit-plugin"
                :location "/Users/IPringle/.asdf/installs/nodejs/18.11.0/lib/node_modules/ts-lit-plugin/")
          (list :name "typescript-lit-html-plugin"
                :location "/Users/IPringle/.asdf/installs/nodejs/18.11.0/lib/node_modules/typescript-lit-html-plugin/")))
#+end_src

This will set ~web-mode~ as the preferred mode for JavaScript. I'm doing this largely because all my JS projects seem to be opened with ~RJSX-mode~ which is not at all my favorite mode, even for editing JSX.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el
(add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
#+end_src
* Other Packages
** benchmark-init
This is a tool for profiling emacs startup
#+begin_src emacs-lisp :tangle ~/.config/doom/packages.el
(package! benchmark-init)
#+end_src

Let's only run this when we open emacs with the =--debug-init= argument:
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link
(when init-file-debug
  (require 'benchmark-init)
  (add-hook 'doom-first-input-hoot #'benchmark-init/deactivate))
#+end_src
** Custom Packages
*** hammerspoon.el
This just loads the ~hammerspoon.el~ code needed to get the editWithEmacs Spoon
working.
#+begin_src emacs-lisp :tangle ~/.config/doom/config.el :comments link :tangle no
(let ((hammerspoon-module "~/.hammerspoon/Spoons/editWithEmacs.spoon/hammerspoon.el"))
  (when (file-exists-p hammerspoon-module)
    (load hammerspoon-module)))
#+end_src
